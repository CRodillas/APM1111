{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "33871f7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Head:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Participant</th>\n",
       "      <th>Cloak</th>\n",
       "      <th>Mischief</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Participant  Cloak  Mischief\n",
       "0            1      0         3\n",
       "1            2      0         1\n",
       "2            3      0         5\n",
       "3            4      0         4\n",
       "4            5      0         6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tail:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Participant</th>\n",
       "      <th>Cloak</th>\n",
       "      <th>Mischief</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Participant  Cloak  Mischief\n",
       "19           20      1         4\n",
       "20           21      1         2\n",
       "21           22      1         5\n",
       "22           23      1         7\n",
       "23           24      1         5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import scipy.stats as stats\n",
    "from IPython.display import display\n",
    "\n",
    "df = pd.read_csv('E:/Downloads/Invisibility_Cloak.csv')\n",
    "\n",
    "print(\"Head:\")\n",
    "display(df.head())\n",
    "print(\"Tail:\")\n",
    "display(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "186fbfb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mischief Data Type: int64\n"
     ]
    }
   ],
   "source": [
    "#Assumption 1: The dependent variable (Mischief) is a continuous level.\n",
    "\n",
    "print(f\"Mischief Data Type: {df['Mischief'].dtype}\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31b0922b",
   "metadata": {},
   "source": [
    "<b>Assumption 1:</b>Since the Data type of Mischief is an integer (int64) then the assumption 1 holds as continuous."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f0534b47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1]\n"
     ]
    }
   ],
   "source": [
    "# Assumption2: The independent variable (Cloak) consists of two categorical, independent groups (With a cloak, Without a cloak)\n",
    "print(df['Cloak'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33fb542f",
   "metadata": {},
   "source": [
    "<b>Assumption 2:</b> Since it consists of two categorical groups which are independent, then assumption 2 holds "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "28c38271",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cloak\n",
       "0    12\n",
       "1    12\n",
       "Name: count, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assumption 3:\n",
    "display(df['Cloak'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92a2192b",
   "metadata": {},
   "source": [
    "<b>Assumption 3:</b> Each participant is present to only one group.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cbe14dd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#assumption 4:\n",
    "import seaborn as sns\n",
    "\n",
    "sns.boxplot(x='Cloak', y='Mischief', data=df)\n",
    "plt.title(\"Boxplot for detecting outliers\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db01bddb",
   "metadata": {},
   "source": [
    "<b>Assumption 4:</b> Based on the visual representation on the boxplot, there are no visible significant outliers in the two independent variable (Cloak) in terms of the dependent variable (Mischief). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ddee699b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Group</th>\n",
       "      <th>W-statistic</th>\n",
       "      <th>p-value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No Cloak</td>\n",
       "      <td>0.912763</td>\n",
       "      <td>0.231446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>With Cloak</td>\n",
       "      <td>0.972617</td>\n",
       "      <td>0.936189</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Group  W-statistic   p-value\n",
       "0    No Cloak     0.912763  0.231446\n",
       "1  With Cloak     0.972617  0.936189"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#aSsmp5:\n",
    "from scipy.stats import shapiro\n",
    "\n",
    "stat_no_cloak, p_no_cloak = shapiro(no_cloak_group)\n",
    "stat_cloak, p_cloak = shapiro(cloak_group)\n",
    "\n",
    "results5 = pd.DataFrame({\n",
    "    'Group': ['No Cloak', 'With Cloak'],\n",
    "    'W-statistic': [stat_no_cloak, stat_cloak],\n",
    "    'p-value': [p_no_cloak, p_cloak]\n",
    "})\n",
    "\n",
    "display(results5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f46db7f3",
   "metadata": {},
   "source": [
    "<b>Assumption 5:</b> Both groups are normally distributed, reject the null hypothesis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bcad7b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Test</th>\n",
       "      <th>Statistic</th>\n",
       "      <th>p-value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Levene's Test for Equality of Variances</td>\n",
       "      <td>0.269755</td>\n",
       "      <td>0.608683</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Test  Statistic   p-value\n",
       "0  Levene's Test for Equality of Variances   0.269755  0.608683"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#assumption6:\n",
    "from scipy.stats import levene\n",
    "\n",
    "levene_stat, levene_p_value = levene(cloak_group, no_cloak_group)\n",
    "levene_results = pd.DataFrame({\n",
    "    'Test': [\"Levene's Test for Equality of Variances\"],\n",
    "    'Statistic': [levene_stat],\n",
    "    'p-value': [levene_p_value]\n",
    "})\n",
    "display(levene_results)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d987b28a",
   "metadata": {},
   "source": [
    "<b>Assumption 6:</b> Since the p-value is greater than the 0.05, reject the Null Hypothesis. Therefore, there is equality of variances between groups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1ae90b1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
